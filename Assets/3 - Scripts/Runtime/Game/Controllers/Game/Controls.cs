//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/3 - Scripts/Runtime/Game/Controllers/Game/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PC"",
            ""id"": ""c85ae2ea-f436-4860-9192-309e5cc4d0f0"",
            ""actions"": [
                {
                    ""name"": ""Target"",
                    ""type"": ""Value"",
                    ""id"": ""6ed81b5b-01bf-437a-9f88-01ac5e12392b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move Up"",
                    ""type"": ""Button"",
                    ""id"": ""32016858-dc11-4797-9a21-c47bbbd0833c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move Down"",
                    ""type"": ""Button"",
                    ""id"": ""83ebc860-451c-4359-95ca-5ab0c4403b25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move Right"",
                    ""type"": ""Button"",
                    ""id"": ""063cb7aa-cf0f-4e5c-ae26-c5e0ba466888"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move Left"",
                    ""type"": ""Button"",
                    ""id"": ""f8f9bb7f-578a-49e3-b1c8-eaa8bae7b3ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""b937ec77-6ce9-43b5-8cc6-721be5401817"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon Prev"",
                    ""type"": ""Button"",
                    ""id"": ""3fea5fcd-74b1-4144-8606-2b941d1c47c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon Next"",
                    ""type"": ""Button"",
                    ""id"": ""a7ffcb55-8f0a-44c6-bc8f-d51b427e8cdb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a08fe541-0438-4e57-be38-b44813d1f83c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdded10f-577e-4110-a65f-ccdc862737b2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d571d84b-8e58-4dfe-85ff-e665197481fd"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9f19992-86ad-447e-9dc7-044036dbd998"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=1,max=1)"",
                    ""groups"": """",
                    ""action"": ""Weapon Prev"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4486f5f-6a9c-454c-9e17-f04224001719"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd943548-234f-4f31-b18e-d1c86e3e8bb0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbbef2bc-4fe3-4cef-b313-c2f66bb0b2b6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6aa90c1-37fd-4bf1-8850-466dfc338f8f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PC
        m_PC = asset.FindActionMap("PC", throwIfNotFound: true);
        m_PC_Target = m_PC.FindAction("Target", throwIfNotFound: true);
        m_PC_MoveUp = m_PC.FindAction("Move Up", throwIfNotFound: true);
        m_PC_MoveDown = m_PC.FindAction("Move Down", throwIfNotFound: true);
        m_PC_MoveRight = m_PC.FindAction("Move Right", throwIfNotFound: true);
        m_PC_MoveLeft = m_PC.FindAction("Move Left", throwIfNotFound: true);
        m_PC_Fire = m_PC.FindAction("Fire", throwIfNotFound: true);
        m_PC_WeaponPrev = m_PC.FindAction("Weapon Prev", throwIfNotFound: true);
        m_PC_WeaponNext = m_PC.FindAction("Weapon Next", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PC
    private readonly InputActionMap m_PC;
    private List<IPCActions> m_PCActionsCallbackInterfaces = new List<IPCActions>();
    private readonly InputAction m_PC_Target;
    private readonly InputAction m_PC_MoveUp;
    private readonly InputAction m_PC_MoveDown;
    private readonly InputAction m_PC_MoveRight;
    private readonly InputAction m_PC_MoveLeft;
    private readonly InputAction m_PC_Fire;
    private readonly InputAction m_PC_WeaponPrev;
    private readonly InputAction m_PC_WeaponNext;
    public struct PCActions
    {
        private @Controls m_Wrapper;
        public PCActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Target => m_Wrapper.m_PC_Target;
        public InputAction @MoveUp => m_Wrapper.m_PC_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_PC_MoveDown;
        public InputAction @MoveRight => m_Wrapper.m_PC_MoveRight;
        public InputAction @MoveLeft => m_Wrapper.m_PC_MoveLeft;
        public InputAction @Fire => m_Wrapper.m_PC_Fire;
        public InputAction @WeaponPrev => m_Wrapper.m_PC_WeaponPrev;
        public InputAction @WeaponNext => m_Wrapper.m_PC_WeaponNext;
        public InputActionMap Get() { return m_Wrapper.m_PC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCActions set) { return set.Get(); }
        public void AddCallbacks(IPCActions instance)
        {
            if (instance == null || m_Wrapper.m_PCActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PCActionsCallbackInterfaces.Add(instance);
            @Target.started += instance.OnTarget;
            @Target.performed += instance.OnTarget;
            @Target.canceled += instance.OnTarget;
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @WeaponPrev.started += instance.OnWeaponPrev;
            @WeaponPrev.performed += instance.OnWeaponPrev;
            @WeaponPrev.canceled += instance.OnWeaponPrev;
            @WeaponNext.started += instance.OnWeaponNext;
            @WeaponNext.performed += instance.OnWeaponNext;
            @WeaponNext.canceled += instance.OnWeaponNext;
        }

        private void UnregisterCallbacks(IPCActions instance)
        {
            @Target.started -= instance.OnTarget;
            @Target.performed -= instance.OnTarget;
            @Target.canceled -= instance.OnTarget;
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @WeaponPrev.started -= instance.OnWeaponPrev;
            @WeaponPrev.performed -= instance.OnWeaponPrev;
            @WeaponPrev.canceled -= instance.OnWeaponPrev;
            @WeaponNext.started -= instance.OnWeaponNext;
            @WeaponNext.performed -= instance.OnWeaponNext;
            @WeaponNext.canceled -= instance.OnWeaponNext;
        }

        public void RemoveCallbacks(IPCActions instance)
        {
            if (m_Wrapper.m_PCActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPCActions instance)
        {
            foreach (var item in m_Wrapper.m_PCActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PCActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PCActions @PC => new PCActions(this);
    public interface IPCActions
    {
        void OnTarget(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnWeaponPrev(InputAction.CallbackContext context);
        void OnWeaponNext(InputAction.CallbackContext context);
    }
}
